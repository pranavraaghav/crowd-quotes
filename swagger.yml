openapi: '3.0.0'

info:
  title: CrowdQuotes
  version: '1.0'

servers:
  - url: http://localhost:8080/api/v1/

components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserOut: 
      properties:
        userId: 
          type: string
          example: b192f113-6cf9-4634-45e0-3ae06ac98b8
        username: 
          type: string
          example: John Doe
        isReviewer: 
          type: boolean
          example: false
    Quote: 
      properties:
        quoteId: 
          type: string
          example: e41a1a5a-2a55-418f-a5c3-1d213f7412bc
        text:
          type: string
          example: This is te actual quote
        description: 
          type: string
          example: This contains any stories relevant to the quote
        category: 
          type: string
          example: Advice
        approved: 
          type: boolean
          example: false
        approveCount: 
          type: integer
          example: 1
        reviewedBy: 
          type: array
          items: 
            type: string
            example: e41a1a5a-2a55-418f-a5c3-1d213f7412bc

paths:
  /user/signup:
    post:
      requestBody: 
        required: true
        content: 
          application/json: 
            schema:
              type: object 
              properties:
                username:
                  type: string
                  example: smartfellow
                password: 
                  type: string
                  example: supersecurepassword
      responses:
        '201':
          description: Created new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  code: 
                    type: integer
                    example: 201 
                  message:
                    type: string
                    example: "User created successfully"
                  jwt: 
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.1261c2VySWQiOiIzYTBmNmJkZC05M2RiLTRlZmYtYTUxNC0xNTdiYmUyMGE0MDAiLCJpYXQiOjE2MjUzNzkzMDIsImV4cCI6MTYyNTQ2NTcwMn0.bvcUH4ooUnZOCC7y1NN6W-yU0kb9W_7hcNyb084stag
                  data: 
                    $ref: '#/components/schemas/UserOut'
        '400': 
          description: "User already exists"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  code: 
                    type: integer
                    example: 400 
                  message:
                    type: string
                    example: 'User already exists'
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  code: 
                    type: integer
                    example: 500 
                  message:
                    type: string
                    example: 'Internal server error'
  /user/login:
    post:
      requestBody: 
        required: true
        content: 
          application/json: 
            schema:
              type: object 
              properties:
                username:
                  type: string
                  example: smartfellow
                password: 
                  type: string
                  example: supersecurepassword
      responses:
        '200':
          description: Logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  code: 
                    type: integer
                    example: 201 
                  message:
                    type: string
                    example: "Logged in successfully"
                  jwt: 
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.1261c2VySWQiOiIzYTBmNmJkZC05M2RiLTRlZmYtYTUxNC0xNTdiYmUyMGE0MDAiLCJpYXQiOjE2MjUzNzkzMDIsImV4cCI6MTYyNTQ2NTcwMn0.bvcUH4ooUnZOCC7y1NN6W-yU0kb9W_7hcNyb084stag
                  data: 
                    $ref: "#/components/schemas/UserOut"
        '404': 
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  code: 
                    type: integer
                    example: 404 
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: true
                  code: 
                    type: integer
                    example: 500 
                  message:
                    type: string
                    example: 'Internal server error'
  /user/details:
    get: 
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get all details about the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  code: 
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'User details fetched successfully'
                  data: 
                    type: object
                    properties:
                      userId: 
                        type: string
                        example: b4ccf113-6cf9-4634-8ae0-3bae06ac98b8
                      username: 
                        type: string
                        example: John Doe 
                      isReviewer: 
                        type: boolean
                        example: false
                      quotes: 
                        type: array
                        items:
                          $ref: '#/components/schemas/Quote'

  /quote/categories:
    get: 
      responses:
        '200':
          description: Get a list containing all valid categories
          content: 
            application/json: 
              schema: 
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  code: 
                    type: integer
                    example: 200
                  categories: 
                    type: array
                    example: [None, Advice]
                    items: 
                      type: string

  /quote/submit:
    post: 
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema:
              type: object 
              properties:
                text:
                  type: string
                  example: This will be actual quote
                description: 
                  type: string
                  example: A story relevant to the quote 
                category:
                  type: string
                  example: Advice
      responses:
        '201':
          description: Quote added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  code: 
                    type: integer
                    example: 201 
                  message:
                    type: string
                    example: "Quote added successfully"
                  data: 
                    $ref: "#/components/schemas/Quote"

  /quote/review:
    get:
      parameters:
        - in: query
          name: count
          required: false
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses: 
        '200':
          description: >
            If count is greater than number of quotes in database, returns all the quotes that remain.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  code: 
                    type: integer
                    example: 200
                  data: 
                    type: array
                    items:
                      $ref: '#/components/schemas/Quote'
    post: 
      security:
        - bearerAuth: []
      requestBody: 
        description: >
          Endpoint used to post a reviewer's approval decision 
        content: 
          application/json:
            schema: 
              type: object
              properties:
                quoteId: 
                  type: string
                  example: 979edbc7-0e10-455b-8657-385b696377f2
                approved:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Review submitted 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: boolean
                    example: false
                  code: 
                    type: integer
                    example: 200
                  data: 
                    $ref: '#/components/schemas/Quote'
